/*         Scroll below to see JAVA code also          */
/*
    YOUTUBE VIDEO ON THIS Qn    : https://www.youtube.com/watch?v=4XLzLdAE4Lc
    Company Tags                : J.P Morgan
    Leetcode Link               : https://leetcode.com/problems/minimum-string-length-after-removing-substrings
*/

/****************************************************************** C++ ******************************************************************/
//Approach-1 (Brute Force)
//T.C : O(n^2)
//S.C : O(1)
class Solution {
public:
    int minLength(string s) {
        int pos1=s.find("AB");
        int pos2=s.find("CD");
        while(pos1!=string::npos or pos2!=string::npos){
            pos1=s.find("AB");
            if(pos1!=string::npos) s.erase(pos1,2);
            pos2=s.find("CD");
            if(pos2!=string::npos) s.erase(pos2,2);
        }
        return s.size();
    }
};


//Approach-2 (Using stack)
//T.C : O(n)
//S.C : O(n)
class Solution {
public:
    int minLength(string s) {
        stack<char>st;
        for(auto&ch:s){
            if(!st.empty()&&st.top()=='A'&&ch=='B'){
               st.pop();
            }
            else if(!st.empty()&&st.top()=='C'&&ch=='D'){
                st.pop();
            }
            else st.push(ch);
        }
        return st.size();
    }
};

//Approach-3 (Using 2 pointers = i : read, j ; write)
//T.C : O(n)
//S.C : O(1)
class Solution {
public:
    int minLength(string s) {
        int i=0,j=1;
        while(j<s.size()){
            if(i<0){
                i++;
                s[i]=s[j];
                j++;
            }
            else if((s[i]=='A'&&s[j]=='B') or (s[i]=='C'&&s[j]=='D')){
                i--;
                j++;
            }
            else{
                i++;
                s[i]=s[j];
                j++;
            }
        }
       return i+1;
    }
};


/****************************************************************** JAVA ******************************************************************/
//Approach-1 (Brute Force)
//T.C : O(n^2)
//S.C : O(1)
class Solution {
    public int minLength(String s) {
        while (s.contains("AB") || s.contains("CD")) {
            if (s.contains("AB")) {
                s = s.replaceFirst("AB", "");
            } else if (s.contains("CD")) {
                s = s.replaceFirst("CD", "");
            }
        }
        return s.length();
    }
}



//Approach-2 (Using stack)
//T.C : O(n)
//S.C : O(n)
class Solution {
    public int minLength(String s) {
        Stack<Character> st = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            char currentChar = s.charAt(i);

            if (st.isEmpty()) {
                st.push(currentChar);
                continue;
            }

            if (currentChar == 'B' && st.peek() == 'A') {
                st.pop();
            } else if (currentChar == 'D' && st.peek() == 'C') {
                st.pop();
            } else {
                st.push(currentChar);
            }
        }

        return st.size();
    }
}


//Approach-3 (Using 2 pointers = i : read, j ; write)
//T.C : O(n)
//S.C : O(1)
class Solution {
    public int minLength(String s) {
        int n = s.length();
        
        StringBuilder sb = new StringBuilder(s);
        int i = 0; // Write pointer
        int j = 1; // Read pointer

        while (j < n) {
            if (i < 0) {
                i++;
                sb.setCharAt(i, sb.charAt(j));
            } else if ((sb.charAt(i) == 'A' && sb.charAt(j) == 'B') ||
                       (sb.charAt(i) == 'C' && sb.charAt(j) == 'D')) {
                i--;
            } else {
                i++;
                sb.setCharAt(i, sb.charAt(j));
            }
            j++;
        }
        return i + 1;
    }
}
