class Solution {
public:
    int dx[4]={-1,0,1,0};
    int dy[4]={0,1,0,-1};
    int minTimeToReach(vector<vector<int>>& moveTime) {
        int n=moveTime.size();
        int m=moveTime[0].size();
        priority_queue<pair<int,vector<int>>,vector<pair<int,vector<int>>>,greater<pair<int,vector<int>>>>pq;
        vector<vector<vector<int>>>dist(n,vector<vector<int>>(m,vector<int>(2,INT_MAX)));
        dist[0][0][0]=0;
        pq.push({0,{0,0,0}});
        while(!pq.empty()){
            int time=pq.top().first;
            int x=pq.top().second[0];
            int y=pq.top().second[1];
            int alt=pq.top().second[2];
            pq.pop();
            if(x==n-1&&y==m-1)return time;
            for(int i=0;i<4;i++){
                int nx=x+dx[i];
                int ny=y+dy[i];
                if(nx>=0&&nx<n&&ny>=0&&ny<m){
                    int dst=max(time,moveTime[nx][ny])+(alt?2:1);
                    if(dst<dist[nx][ny][!alt]){
                        dist[nx][ny][!alt]=dst;
                        pq.push({dst,{nx,ny,!alt}});
                    }
                }
            }
        }
        return -1;
    }
};
