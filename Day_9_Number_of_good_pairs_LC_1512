class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {          // Tc->O(n2) , Sc->O(1)
        int n = nums.size();
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=i+1 ; j<n;j++){
                if(nums[i]==nums[j]) count++;
            }
        }
        return count;
    }
};

// Approach-2
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int n= nums.size();
        unordered_map<int,int>mp;
        for(auto &num : nums){
            mp[num]++;
        }                                                              // Tc->O(n) , Sc->O(n)
        int result=0;
        for(auto &it : mp){
            int count= it.second;
            result+=(count*(count-1))/2;
        }
        return result;
    }
};

// Approach-3
class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int n = nums.size();
        int result=0;
        unordered_map<int,int>mp;                              // Tc->O(n) , Sc->O(n)
        for(auto &num : nums){
            result+=mp[num];
            mp[num]++;
        }
        return result;
    }
};
