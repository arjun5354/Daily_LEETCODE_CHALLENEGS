class Solution {
public:
    int n,m;
    int dp[1001][1001];
    int solve(int row,int col,vector<vector<int>>& grid){
        if(row<0||col<0||row>=n||col>=m)return 0;
        if(dp[row][col]!=-1)return dp[row][col];
        int a=0;
        int b=0;
        int c=0;
        if(row-1>=0&&col+1<m&&grid[row-1][col+1]>grid[row][col])a=solve(row-1,col+1,grid)+1;
        if(col+1<m&&grid[row][col+1]>grid[row][col])b=solve(row,col+1,grid)+1;
        if(row+1<n&&col+1<m&&grid[row+1][col+1]>grid[row][col])c=solve(row+1,col+1,grid)+1;
    return dp[row][col]=max({a,b,c});
    }
    int maxMoves(vector<vector<int>>& grid) {
        int result=0;
        n=grid.size();
        m=grid[0].size();
        memset(dp,-1,sizeof(dp));
        for(int i=0;i<n;i++){
            int depth=solve(i,0,grid);
            result=max(result,depth);
        }
        return result;
    }
};
