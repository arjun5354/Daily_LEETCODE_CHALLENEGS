/*         Scroll down to see JAVA code also        */
/*
    YOUTUBE VIDEO ON THIS Qn    : https://www.youtube.com/watch?v=6zb5qH4oNSY
    Company Tags                : 
    Leetcode Link               : https://leetcode.com/problems/longest-unequal-adjacent-groups-subsequence-i
*/

/*********************************************************** C++ **************************************************/
//Approach (Counting groups)
//T.C : O(n)
//S.C : O(1)
class Solution {
public:
    vector<string> getLongestSubsequence(vector<string>& words, vector<int>& groups) {
        int n = words.size();

        vector<string> result;
        for(int i = 0; i < n; i++) {
            if(i == 0 || groups[i] != groups[i-1]) { //new group started, so pick the first element
                result.push_back(words[i]);
            }
        }

        return result;
    }
};

Approach-2 (using Recursion)
class Solution {
public:
    void solve(int i, vector<string>&result,vector<string>& words, vector<int>& groups,int curr){
        if(i>=words.size()) return;
        if(curr!=groups[i]){
            result.push_back(words[i]);
            solve(i+1,result,words,groups,groups[i]);
        }
        else solve(i+1,result,words,groups,curr);
    }
    vector<string> getLongestSubsequence(vector<string>& words, vector<int>& groups) {
        vector<string>result;
        result.push_back(words[0]);
        solve(1,result,words,groups,groups[0]);
        return result;
    }
};
/*********************************************************** JAVA **************************************************/
//Approach (Counting groups)
//T.C : O(n)
//S.C : O(1)
class Solution {
    public List<String> getLongestSubsequence(String[] words, int[] groups) {
        int n = words.length;
        List<String> result = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (i == 0 || groups[i] != groups[i - 1]) {
                result.add(words[i]); // new group started, so pick the first element
            }
        }

        return result;
    }
}
